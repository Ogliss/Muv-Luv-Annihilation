using RimWorld;
using Verse;
using HarmonyLib;
using System.Reflection;
using System.Collections.Generic;
using System;
using Verse.AI;
using System.Text;
using System.Linq;
using Verse.AI.Group;
using RimWorld.Planet;
using UnityEngine;
using RimWorld.BaseGen;

namespace MuvLuvBeta.HarmonyInstance
{
    
    [HarmonyPatch(typeof(ExtraHives.GenStuff.SymbolResolver_Hivebase), "Resolve")]
    public static class SymbolResolver_Hivebase_Resolve_BETA_Patch
    {
        public static void Postfix(ExtraHives.GenStuff.SymbolResolver_Hivebase __instance, ref ResolveParams rp)
        {
            Map map = BaseGen.globalSettings.map;
            if (rp.faction.def.defName.Contains("MuvLuv_BETA"))
            {
                float mult = 1f;
                float sizemod = 2f;
                if (rp.faction.def.defName.Contains("2P"))
                {
                    mult = 1.2f;
                    sizemod = 1.8f;
                }
                if (rp.faction.def.defName.Contains("3P"))
                {
                    mult = 1.4f; 
                    sizemod = 1.6f;
                }
                if (rp.faction.def.defName.Contains("4P"))
                {
                    mult = 1.6f;
                    sizemod = 1.4f;
                }
                if (rp.faction.def.defName.Contains("5P"))
                {
                    mult = 1.8f;
                    sizemod = 1.2f;
                }
                if (rp.faction.def.defName.Contains("6P"))
                {
                    mult = 2f;
                    sizemod = 1f;
                }
                rp.rect.Width = (int)(rp.rect.Width / sizemod);
                rp.rect.Height = (int)(rp.rect.Height / sizemod);
                if (rp.pawnGroupMakerParams != null)
                {
                    rp.pawnGroupMakerParams.points = (rp.settlementPawnGroupPoints ?? SymbolResolver_Settlement.DefaultPawnsPoints.RandomInRange) * mult;
                }
                else
                {
                    rp.pawnGroupMakerParams = new PawnGroupMakerParms();
                    rp.pawnGroupMakerParams.tile = map.Tile;
                    rp.pawnGroupMakerParams.faction = rp.faction;
                    rp.pawnGroupMakerParams.points = (rp.settlementPawnGroupPoints ?? SymbolResolver_Settlement.DefaultPawnsPoints.RandomInRange) * mult;
                    rp.pawnGroupMakerParams.inhabitants = true;
                    rp.pawnGroupMakerParams.seed = rp.settlementPawnGroupSeed;
                }
            }
        }
    }
    
} 